//
// Generated file, do not edit! Created by opp_msgtool 6.1 from NetworkMessages.msg.
//

#ifndef __NETWORKMESSAGES_M_H
#define __NETWORKMESSAGES_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class NetworkMsg;
class ReadRequestMsg;
class ReadResponseMsg;
class WriteRequestMsg;
class WriteResponseMsg;
class UpdateMsg;
class UpdateAckMsg;
class HeartbeatMsg;
// cplusplus {{
#include <map>
#include <string>
typedef std::map<int, int> VectorClock;
typedef std::map<std::string, int> Store;
// }}

/**
 * Class generated from <tt>NetworkMessages.msg:26</tt> by opp_msgtool.
 * <pre>
 * message NetworkMsg
 * {
 *     int sourceId;
 * }
 * </pre>
 */
class NetworkMsg : public ::omnetpp::cMessage
{
  protected:
    int sourceId = 0;

  private:
    void copy(const NetworkMsg& other);

  protected:
    bool operator==(const NetworkMsg&) = delete;

  public:
    NetworkMsg(const char *name=nullptr, short kind=0);
    NetworkMsg(const NetworkMsg& other);
    virtual ~NetworkMsg();
    NetworkMsg& operator=(const NetworkMsg& other);
    virtual NetworkMsg *dup() const override {return new NetworkMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSourceId() const;
    virtual void setSourceId(int sourceId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NetworkMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NetworkMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>NetworkMessages.msg:30</tt> by opp_msgtool.
 * <pre>
 * message ReadRequestMsg extends NetworkMsg
 * {
 *     string key;
 * }
 * </pre>
 */
class ReadRequestMsg : public ::NetworkMsg
{
  protected:
    omnetpp::opp_string key;

  private:
    void copy(const ReadRequestMsg& other);

  protected:
    bool operator==(const ReadRequestMsg&) = delete;

  public:
    ReadRequestMsg(const char *name=nullptr, short kind=0);
    ReadRequestMsg(const ReadRequestMsg& other);
    virtual ~ReadRequestMsg();
    ReadRequestMsg& operator=(const ReadRequestMsg& other);
    virtual ReadRequestMsg *dup() const override {return new ReadRequestMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getKey() const;
    virtual void setKey(const char * key);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ReadRequestMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ReadRequestMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>NetworkMessages.msg:34</tt> by opp_msgtool.
 * <pre>
 * message ReadResponseMsg extends NetworkMsg
 * {
 *     string key;
 *     int value;
 * }
 * </pre>
 */
class ReadResponseMsg : public ::NetworkMsg
{
  protected:
    omnetpp::opp_string key;
    int value = 0;

  private:
    void copy(const ReadResponseMsg& other);

  protected:
    bool operator==(const ReadResponseMsg&) = delete;

  public:
    ReadResponseMsg(const char *name=nullptr, short kind=0);
    ReadResponseMsg(const ReadResponseMsg& other);
    virtual ~ReadResponseMsg();
    ReadResponseMsg& operator=(const ReadResponseMsg& other);
    virtual ReadResponseMsg *dup() const override {return new ReadResponseMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getKey() const;
    virtual void setKey(const char * key);

    virtual int getValue() const;
    virtual void setValue(int value);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ReadResponseMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ReadResponseMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>NetworkMessages.msg:39</tt> by opp_msgtool.
 * <pre>
 * message WriteRequestMsg extends NetworkMsg
 * {
 *     string key;
 *     int value;
 * }
 * </pre>
 */
class WriteRequestMsg : public ::NetworkMsg
{
  protected:
    omnetpp::opp_string key;
    int value = 0;

  private:
    void copy(const WriteRequestMsg& other);

  protected:
    bool operator==(const WriteRequestMsg&) = delete;

  public:
    WriteRequestMsg(const char *name=nullptr, short kind=0);
    WriteRequestMsg(const WriteRequestMsg& other);
    virtual ~WriteRequestMsg();
    WriteRequestMsg& operator=(const WriteRequestMsg& other);
    virtual WriteRequestMsg *dup() const override {return new WriteRequestMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getKey() const;
    virtual void setKey(const char * key);

    virtual int getValue() const;
    virtual void setValue(int value);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WriteRequestMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WriteRequestMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>NetworkMessages.msg:44</tt> by opp_msgtool.
 * <pre>
 * message WriteResponseMsg extends NetworkMsg
 * {
 *     string key;
 * }
 * </pre>
 */
class WriteResponseMsg : public ::NetworkMsg
{
  protected:
    omnetpp::opp_string key;

  private:
    void copy(const WriteResponseMsg& other);

  protected:
    bool operator==(const WriteResponseMsg&) = delete;

  public:
    WriteResponseMsg(const char *name=nullptr, short kind=0);
    WriteResponseMsg(const WriteResponseMsg& other);
    virtual ~WriteResponseMsg();
    WriteResponseMsg& operator=(const WriteResponseMsg& other);
    virtual WriteResponseMsg *dup() const override {return new WriteResponseMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getKey() const;
    virtual void setKey(const char * key);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WriteResponseMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WriteResponseMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>NetworkMessages.msg:48</tt> by opp_msgtool.
 * <pre>
 * message UpdateMsg extends NetworkMsg
 * {
 *     int updateId;
 *     string key;
 *     int value;
 *     VectorClock vectorClock;
 * }
 * </pre>
 */
class UpdateMsg : public ::NetworkMsg
{
  protected:
    int updateId = 0;
    omnetpp::opp_string key;
    int value = 0;
    VectorClock vectorClock;

  private:
    void copy(const UpdateMsg& other);

  protected:
    bool operator==(const UpdateMsg&) = delete;

  public:
    UpdateMsg(const char *name=nullptr, short kind=0);
    UpdateMsg(const UpdateMsg& other);
    virtual ~UpdateMsg();
    UpdateMsg& operator=(const UpdateMsg& other);
    virtual UpdateMsg *dup() const override {return new UpdateMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getUpdateId() const;
    virtual void setUpdateId(int updateId);

    virtual const char * getKey() const;
    virtual void setKey(const char * key);

    virtual int getValue() const;
    virtual void setValue(int value);

    virtual const VectorClock& getVectorClock() const;
    virtual VectorClock& getVectorClockForUpdate() { return const_cast<VectorClock&>(const_cast<UpdateMsg*>(this)->getVectorClock());}
    virtual void setVectorClock(const VectorClock& vectorClock);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const UpdateMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, UpdateMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>NetworkMessages.msg:55</tt> by opp_msgtool.
 * <pre>
 * message UpdateAckMsg extends NetworkMsg
 * {
 *     int updateId;
 * }
 * </pre>
 */
class UpdateAckMsg : public ::NetworkMsg
{
  protected:
    int updateId = 0;

  private:
    void copy(const UpdateAckMsg& other);

  protected:
    bool operator==(const UpdateAckMsg&) = delete;

  public:
    UpdateAckMsg(const char *name=nullptr, short kind=0);
    UpdateAckMsg(const UpdateAckMsg& other);
    virtual ~UpdateAckMsg();
    UpdateAckMsg& operator=(const UpdateAckMsg& other);
    virtual UpdateAckMsg *dup() const override {return new UpdateAckMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getUpdateId() const;
    virtual void setUpdateId(int updateId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const UpdateAckMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, UpdateAckMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>NetworkMessages.msg:59</tt> by opp_msgtool.
 * <pre>
 * message HeartbeatMsg extends NetworkMsg
 * {
 *     int timestamp;
 * }
 * </pre>
 */
class HeartbeatMsg : public ::NetworkMsg
{
  protected:
    int timestamp = 0;

  private:
    void copy(const HeartbeatMsg& other);

  protected:
    bool operator==(const HeartbeatMsg&) = delete;

  public:
    HeartbeatMsg(const char *name=nullptr, short kind=0);
    HeartbeatMsg(const HeartbeatMsg& other);
    virtual ~HeartbeatMsg();
    HeartbeatMsg& operator=(const HeartbeatMsg& other);
    virtual HeartbeatMsg *dup() const override {return new HeartbeatMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getTimestamp() const;
    virtual void setTimestamp(int timestamp);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const HeartbeatMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, HeartbeatMsg& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

inline any_ptr toAnyPtr(const VectorClock *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline VectorClock *fromAnyPtr(any_ptr ptr) { return ptr.get<VectorClock>(); }
inline any_ptr toAnyPtr(const Store *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline Store *fromAnyPtr(any_ptr ptr) { return ptr.get<Store>(); }
template<> inline NetworkMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<NetworkMsg*>(ptr.get<cObject>()); }
template<> inline ReadRequestMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<ReadRequestMsg*>(ptr.get<cObject>()); }
template<> inline ReadResponseMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<ReadResponseMsg*>(ptr.get<cObject>()); }
template<> inline WriteRequestMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<WriteRequestMsg*>(ptr.get<cObject>()); }
template<> inline WriteResponseMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<WriteResponseMsg*>(ptr.get<cObject>()); }
template<> inline UpdateMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<UpdateMsg*>(ptr.get<cObject>()); }
template<> inline UpdateAckMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<UpdateAckMsg*>(ptr.get<cObject>()); }
template<> inline HeartbeatMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<HeartbeatMsg*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __NETWORKMESSAGES_M_H

